{"version":3,"file":"static/js/731.706fd6a5.chunk.js","mappings":"4KACA,G,QAA0B,0BAA1B,EAAiE,6BAAjE,EAAuG,wBAAvG,EAAwI,wBAAxI,EAA2K,0BAA3K,EAAgN,0BAAhN,EAAqP,0B,mBCOrP,EAJgB,SAACA,GAAK,OAClBA,EAAMC,GAAK,IAAM,GAAK,iBAAKC,UAAWC,EAAiB,WAAC,SAACC,EAAA,EAAQ,IAAGJ,EAAMK,YAAmB,iBAAKH,UAAWC,EAAiB,UAAEH,EAAMK,SAAQ,SAACD,EAAA,EAAQ,MAAU,E,UCQrK,EARmB,SAACJ,GAChB,IAAIM,EAAO,YAAcN,EAAMC,GAE/B,OAAQ,iBAAKC,UAAWC,EAAiB,IAAMA,EAAe,WAC1D,SAACC,EAAA,EAAQ,KACT,SAAC,KAAO,CAACG,GAAID,EAAK,SAAEN,EAAMQ,SAElC,E,uCCJIC,GAAYC,EAAAA,EAAAA,GAAiB,KAgB3BC,GAAmBC,EAAAA,EAAAA,GAAU,CAACC,KAAM,wBAAjBD,EAdF,SAACZ,GAEpB,OAEI,kBAAMc,SAAUd,EAAMe,aAAa,WAC/B,0BAAK,SAACC,EAAA,EAAK,CAACC,YAAa,qBAAsBC,UAAWC,EAAAA,GAC9CC,SAAU,CAACC,EAAAA,EAAUZ,GAAYD,KAAM,yBACnD,0BACI,4BAAQ,oBAGxB,IA8BA,EAzBgB,SAACR,GACb,IAAIsB,EAAkBtB,EAAMuB,YAAYC,QAAQC,KAAI,SAAAC,GAAC,OAAK,SAAC,EAAU,CAAClB,KAAMkB,EAAElB,KAAiBP,GAAIyB,EAAEzB,IAAZyB,EAAEzB,GAAe,IACtG0B,EAAmB3B,EAAMuB,YAAYK,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAO,CAACxB,QAASwB,EAAExB,QAAoBJ,GAAI4B,EAAE5B,IAAZ4B,EAAE5B,GAAe,IAS9G,OAAQ,iBAAKC,UAAWC,EAAgB,WAChC,gBAAKD,UAAWC,EAAoB,SAC/BmB,KAEL,iBAAKpB,UAAWC,EAAiB,UAC5BwB,GAID,SAAChB,EAAgB,CAACG,SAfR,SAACgB,GAGnB9B,EAAM+B,WAAWD,EAAME,kBAC3B,SAcJ,E,oBCjCA,GAAeC,E,QAAAA,KACXC,EAAAA,EAAAA,KAXkB,SAACC,GACnB,MAAO,CAACZ,YAAaY,EAAMZ,YAC/B,IACyB,SAACa,GACtB,MAAO,CAEHL,WAAY,SAACC,GAAiB,OAAKI,GAASC,EAAAA,EAAAA,GAAwBL,GAAmB,EAE/F,IAIIM,EAAAA,EAFJ,CAGEC,E,mEClBF,EAAyB,yB,SCSzB,EAPiB,WACb,OACI,gBAAKrC,UAAWC,EAAgBqC,IAAI,6EAChCC,IAAI,UAEhB,C,kHCJIC,EAA6B,SAACP,GAAK,MAAM,CACzCQ,OAAQR,EAAMS,SAASD,OAC1B,EAgBD,IAdyB,SAACE,GAAe,IAE/BC,EAAiB,qGAMlB,OANkB,8BACnB,WACI,OAAIC,KAAK/C,MAAM2C,QAGR,SAACE,GAAS,UAAKE,KAAK/C,SAFhB,SAAC,KAAQ,CAACO,GAAI,UAG7B,KAAC,EANkB,CAASyC,EAAAA,WAQhC,OAAOd,EAAAA,EAAAA,IAAQQ,EAARR,CAAqCY,EAEhD,C","sources":["webpack://network-yarn/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Message/Message.jsx","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.js","webpack://network-yarn/./src/components/common/MyAvatar/MyAvatar.module.css?b00c","components/common/MyAvatar/MyAvatar.jsx","hoc/WithAuthRedirect.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__ZNLrz\",\"dialogsItem\":\"Dialogs_dialogsItem__At7cO\",\"dialog\":\"Dialogs_dialog__OLUwQ\",\"active\":\"Dialogs_active__W4M3L\",\"messages\":\"Dialogs_messages__lxTZ8\",\"message1\":\"Dialogs_message1__w22XP\",\"message2\":\"Dialogs_message2__SVE+y\"};","import React from \"react\";\r\nimport classes from './../Dialogs.module.css';\r\nimport MyAvatar from \"../../common/MyAvatar/MyAvatar\";\r\n\r\nconst Message = (props) =>\r\n    props.id % 2 === 1 ? (<div className={classes.message1}><MyAvatar/>{props.message}</div>) : (<div className={classes.message2}>{props.message}<MyAvatar/></div>);\r\n\r\n\r\nexport default Message;","import React from \"react\";\r\nimport classes from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport MyAvatar from \"../../common/MyAvatar/MyAvatar\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = '/dialogs/' + props.id;\r\n\r\n    return (<div className={classes.dialog + \" \" + classes.active}>\r\n        <MyAvatar/>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>)\r\n}\r\nexport default DialogItem;","import React from \"react\";\r\nimport classes from './Dialogs.module.css';\r\nimport Message from \"./Message/Message\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n//создаём отдельную переменную за пределами формы, иначе будет зацикливание\r\nlet maxLength = maxLengthCreator(100);\r\n//компонента для формы сообщения\r\nconst AddMessageForm = (props) => {\r\n\r\n    return (\r\n        //в качестве аргумента для form передаём через пропсы handleSubmit(\"обработчик отправки формы\")\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div><Field placeholder={'Enter your message'} component={Textarea}\r\n                        validate={[required, maxLength]} name={'newMessageElement'}/></div>\r\n            <div>\r\n                <button>Add message</button>\r\n            </div>\r\n        </form>)\r\n}\r\n\r\n//оборачиваем нашу ComponentForm в reduxForm, необходимо дать её соотетствующее название\r\nconst DialogsReduxForm = reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\nconst Dialogs = (props) => {\r\n    let dialogsElements = props.dialogsPage.dialogs.map(d => (<DialogItem name={d.name} key={d.id} id={d.id}/>))\r\n    let messagesElements = props.dialogsPage.messages.map(m => <Message message={m.message} key={m.id} id={m.id}/>)\r\n\r\n//создаём callback функцию с параметром value, а value это объект.\r\n    const addNewMessage = (value) => {\r\n        //properties у объекта value называются также как name у Field\r\n        //в функцию которая отправляет сообщение передаём наше сообщение в виде свойства\r\n        props.addMessage(value.newMessageElement);\r\n    }\r\n\r\n    return (<div className={classes.dialogs}>\r\n            <div className={classes.dialogsItem}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                {messagesElements}\r\n                {/*передаём нашей вышестоящей компоненте функцию,\r\n                она вызывается когда в компоненту приходит Submit\r\n                (т.е. когда нажали кнопку добавить сообщение*/}\r\n                <DialogsReduxForm onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>)\r\n}\r\n\r\nexport default Dialogs;","import { addMessageActionCreator } from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport WithAuthRedirect from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {dialogsPage: state.dialogsPage}\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        //Добавляем параметр newMessageElement, в нём находится добавленное сообщение\r\n        addMessage: (newMessageElement) => dispatch(addMessageActionCreator(newMessageElement))\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    WithAuthRedirect\r\n)(Dialogs);","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"MyAvatar_avatar__I7pkD\"};","import React from \"react\";\r\nimport classes from './MyAvatar.module.css'\r\n\r\nconst MyAvatar = () => {\r\n    return (\r\n        <img className={classes.avatar} src=\"https://u.kanobu.ru/articles/pics/7e6dc974-43f4-4ad0-9a55-2465566e9662.jpg\"\r\n            alt=\"avatar\"/>\r\n    )\r\n}\r\n\r\nexport default MyAvatar;","import React from \"react\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.authUser.isAuth\r\n})\r\n\r\nconst WithAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if(!this.props.isAuth) {\r\n                return <Navigate to={'/login'}/>\r\n            }\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n    return connect(mapStateToPropsForRedirect) (RedirectComponent);// Димыч создал переменную и отдал ей это значение\r\n\r\n}\r\n\r\nexport default WithAuthRedirect;"],"names":["props","id","className","classes","MyAvatar","message","path","to","name","maxLength","maxLengthCreator","DialogsReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","required","dialogsElements","dialogsPage","dialogs","map","d","messagesElements","messages","m","value","addMessage","newMessageElement","compose","connect","state","dispatch","addMessageActionCreator","WithAuthRedirect","Dialogs","src","alt","mapStateToPropsForRedirect","isAuth","authUser","Component","RedirectComponent","this","React"],"sourceRoot":""}